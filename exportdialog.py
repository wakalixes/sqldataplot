"""
*   This module is part of the sql_data_plot.py application
*   $Rev: 24 $
*   $Date: 2011-08-06 02:10:37 +0200 (Sat, 06 Aug 2011) $
*   $Author: stefan $
*
*   Copyright notice:
* 
*   (c) 2011 Stefan Besler (stefan.besler@gmail.com)
*   All rights reserved
*
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""


from PyQt4 import QtCore
from PyQt4 import QtGui
from exportDialog_ui import Ui_ExportDialog
import csv
import os
import sys
import numpy as np

class ExportDialogWindow(QtGui.QDialog, Ui_ExportDialog):
  def __init__(self, parent = None):
    # setup the GUI --> function generated by pyuic4
    super(ExportDialogWindow, self).__init__()
    self.parent = parent
    self.setupUi(self)
    self.filepath = "C:\\Users\\Admin\\Desktop"
    QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL('accepted()'),self.accept)
    QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL('rejected()'),self.reject)

  def accept(self):
    fileNameFromDialog = QtGui.QFileDialog.getSaveFileName(self, "Save data", self.filepath, "*.*")

    (filepath, filename) = os.path.split(str(fileNameFromDialog))
    (outputFile,ext) = os.path.splitext(filename)

    outputPath = filepath+"/"+outputFile
    self.filepath = filepath  
    # save plot as image
    if self.plotImageCheck.isChecked():
        print "saving plot image"
        pic = QtGui.QPicture()
        pixmap = QtGui.QPixmap(800,600)
        pixmap.fill()
        
        
        self.parent.mainPlot.print_(pixmap)
        painter = QtGui.QPainter(pixmap)

        #painter.drawPicture(0,0,picture)
        painter.end()
        pixmap.save(outputPath+".png")
        print outputPath

    # save all data
    if self.plotDataCheck.isChecked():
        w = csv.writer(open(outputPath+".csv", 'wt'), delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL)
        axesCaptions = []

        #wheater to include errors or not
        for i in range(self.parent.axesTbl.rowCount()):
          axesCaptions.append(self.parent.axesTbl.cellWidget(i,0).currentText())

        if self.parent.averageDataButton.isChecked():
          for i in range(self.parent.axesTbl.rowCount()):
            axesCaptions.append("d"+self.parent.axesTbl.cellWidget(i,0).currentText())

        print axesCaptions
        w.writerow(axesCaptions)

        if not self.parent.averageDataButton.isChecked():
          for r in np.transpose(self.parent.currentData):
            w.writerow(r)
        else:
          for r in (np.transpose(zip(self.parent.currentData,self.parent.currentErrData))):
            print r
            print r.flatten()
            w.writerow(r.flatten())


  def reject(self):
    self.hide()
    self.close()
    pass

# class ExportDialog
